@model hsdc.dpt.Control.DTO.Creational.Builder.OverTime

@{
    ViewBag.Title = "NewOvertime";
}

<h2>NewOvertime</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>OverTime</h4>
        <hr />

        @{
            if (string.IsNullOrWhiteSpace(@Model.OverTimeId) == false)
            {
            <div class="form-group">
                @Html.LabelFor(model => model.OverTimeId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.OverTimeId, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                </div>
            </div>

            }
        }

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Applier, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Applier, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Applier, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ApplyDateTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ApplyDateTime, new { htmlAttributes = new { @class = "form-control" , @Value = Model.ApplyDateTime.ToString("yyyy/MM/dd") } })
                @Html.ValidationMessageFor(model => model.ApplyDateTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.OverTimeHour, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.OverTimeHour, new { htmlAttributes = new { @class = "form-control" , min = "1" ,max = 8} })
                @Html.ValidationMessageFor(model => model.OverTimeHour, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">

                @{
                    if (string.IsNullOrWhiteSpace(@Model.OverTimeId))
                    {
                    <input type="submit" value="Create" class="btn btn-default" />

                    }
                }
            </div>
        </div>
    </div>
                    }

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

@section BodyScripts
{
    <link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css">
    <script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>
    <script>

        $(function () {
            $("#ApplyDateTime").datepicker({
                dateFormat: 'yy/mm/dd',
                //timeFormat: "HH:mm:ss",
                defaultDate: new Date()
            });

        });
    </script>
}